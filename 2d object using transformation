a)Write C++program to draw 2-D object and perform following basic transformations,Scaling
b)Translation c)Rotation.Apply the concept of operator overloading.
OR
b)Write C++program to implement translation,rotation and scaling transformations onequilateral triangle and rhombus.Apply the concept of operator overloading.

#include <iostream>
#include <math.h>
#include <graphics.h>
using namespace std;

class matrix {
public:
    int n, i, j, tx, ty, k, sum, sx, sy;
    double a[3][3]; // Transformation matrix should be 3x3
    double b[6][3]; // Polygon coordinates (vertices)
    double mat3[6][3]; // Resulting coordinates after transformation
    double p, q, r;
    double ang = 0, angle = 0;

public:
    void get() {
        cout << "\nEnter the number of vertices of the polygon: ";
        cin >> n;

        for (i = 0; i < n; i++) {
            cout << "Enter x and y coordinates for vertex " << i + 1 << ": ";
            cin >> b[i][0] >> b[i][1];
            b[i][2] = 1; // Homogeneous coordinate
        }

        // Display original object matrix
        cout << "\nOriginal coordinates are:\n";
        for (i = 0; i < n; i++) {
            for (j = 0; j < 3; j++) {
                cout << b[i][j] << "\t";
            }
            cout << "\n";
        }
    }

    void identitymat() {
        // Initialize the transformation matrix as an identity matrix
        for (i = 0; i < 3; i++) {
            for (j = 0; j < 3; j++) {
                a[i][j] = (i == j) ? 1 : 0;
            }
        }
    }

    void trans() {
        cout << "Enter values of tx and ty: ";
        cin >> tx >> ty;

        identitymat(); // Reset to identity matrix before applying transformation
        a[2][0] = tx; // Translation in x
        a[2][1] = ty; // Translation in y

        cout << "Translation matrix is:\n";
        for (i = 0; i < 3; i++) {
            for (j = 0; j < 3; j++) {
                cout << a[i][j] << "\t";
            }
            cout << "\n";
        }
    }

    void scale() {
        cout << "\nEnter the values of sx and sy: ";
        cin >> sx >> sy;

        identitymat(); // Reset to identity matrix before applying transformation
        a[0][0] = sx; // Scaling in x
        a[1][1] = sy; // Scaling in y

        cout << "\nScaling matrix is:\n";
        for (i = 0; i < 3; i++) {
            for (j = 0; j < 3; j++) {
                cout << a[i][j] << "\t";
            }
            cout << "\n";
        }
    }

    void rot() {
        cout << "Enter the angle (in degrees): ";
        cin >> ang;
        angle = (ang * 3.142) / 180; // Convert degrees to radians
        p = cos(angle);
        q = sin(angle);
        r = -sin(angle);

        identitymat(); // Reset to identity matrix before applying transformation
        a[0][0] = p;  // Rotation matrix
        a[0][1] = q;
        a[1][0] = r;
        a[1][1] = p;

        cout << "Transformation matrix is:\n";
        for (i = 0; i < 3; i++) {
            for (j = 0; j < 3; j++) {
                cout << a[i][j] << "\t";
            }
            cout << "\n";
        }
    }

    void multi() {
        cout << "\nMultiplying two matrices...\n";
        for (i = 0; i < n; i++) {
            for (j = 0; j < 3; j++) {
                sum = 0;
                for (k = 0; k < 3; k++) {
                    sum += b[i][k] * a[k][j];
                }
                mat3[i][j] = sum; // Store the result in mat3
            }
        }
    }

    void display() {
        cout << "\nResulting coordinates after transformation:\n";
        for (i = 0; i < n; i++) {
            for (j = 0; j < 3; j++) {
                cout << mat3[i][j] << " ";
            }
            cout << "\n";
        }

        int gd = DETECT, gm;
        initgraph(&gd, &gm, NULL);

        // Draw the original polygon
        for (int i = 0; i < n - 1; i++) {
            line(b[i][0], b[i][1], b[i + 1][0], b[i + 1][1]);
        }
        line(b[n - 1][0], b[n - 1][1], b[0][0], b[0][1]); // Close the original polygon

        // Draw the transformed polygon
        for (int i = 0; i < n - 1; i++) {
            line(mat3[i][0], mat3[i][1], mat3[i + 1][0], mat3[i + 1][1]);
        }
        line(mat3[n - 1][0], mat3[n - 1][1], mat3[0][0], mat3[0][1]); // Close the transformed polygon

        delay(5000);
        closegraph();
    }
};

int main() {
    matrix g;
    int ch;
    char ans;

    g.get(); // Get the polygon vertices

    do {
        cout << "\nMenu\n1. Translation\n2. Scaling\n3. Rotation\n";
        cin >> ch;
        switch (ch) {
            case 1:
                g.trans();
                g.multi();
                g.display();
                break;
            case 2:
                g.scale();
                g.multi();
                g.display();
                break;
            case 3:
                g.rot();
                g.multi();
                g.display();
                break;
            default:
                cout << "Invalid choice. Please try again.\n";
                break;
        }
        cout << "Do you want to continue? (Y/N): ";
        cin >> ans;
    } while (ans == 'Y' || ans == 'y');

    return 0;
}
