C++ program for hilbert curve using fractals

#include <iostream>
#include <graphics.h>
#include <math.h>
#include <stdlib.h>
using namespace std;

// Function to move and draw line based on direction
void move(int j, int h, int &x, int &y) {
    if (j == 1) y -= h; // Move up
    else if (j == 2) x += h; // Move right
    else if (j == 3) y += h; // Move down
    else if (j == 4) x -= h; // Move left
    lineto(x, y); // Draw line to the new point
}

// Recursive function to generate the Hilbert curve
void hilbert(int r, int d, int l, int u, int i, int h, int &x, int &y) {
    if (i > 0) {
        i--;
        hilbert(d, r, u, l, i, h, x, y); // 1st recursive call
        move(r, h, x, y); // Move
        hilbert(r, d, l, u, i, h, x, y); // 2nd recursive call
        move(d, h, x, y); // Move
        hilbert(l, u, r, d, i, h, x, y); // 3rd recursive call
        move(u, h, x, y); // Move
        hilbert(u, l, d, r, i, h, x, y); // 4th recursive call
    }
}

int main() {
    int n, x1, y1;
    int x0 = 50, y0 = 150, x, y, h = 10, r = 2, d = 3, l = 4, u = 1;

    cout << "\nGive the value of n (order of the Hilbert curve): ";
    cin >> n;

    x = x0; 
    y = y0;

    int driver = DETECT, mode = 0;
    initgraph(&driver, &mode, ""); // Initialize the graphics system
    moveto(x, y); // Move to the starting position

    hilbert(r, d, l, u, n, h, x, y); // Generate the Hilbert curve

    getch(); // Wait for user input
    closegraph(); // Close the graphics window
    return 0;
}
