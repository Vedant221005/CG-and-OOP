Write C++program to draw a concave polygon and fill it with desired color using scan fillalgorithm.Apply the concept of inheritance.

#include<iostream>
#include<graphics.h>  // Required for graphics functions

using namespace std;

// Base class for drawing the polygon
class drawpoly {
public:
    int x, y, temp, n, i, j, k, dy, dx;
    int a[20][2], xi[20];  // Coordinates of vertices and intersection points
    float slope[20];  // To store the inverse slope

    // Method to input the polygon vertices and draw it
    void drawpoly1() {
        cout << "\nEnter the number of vertices of the polygon: ";
        cin >> n;
        cout << "\nEnter the coordinates of the edges one by one\n";
        for (i = 0; i < n; i++) {
            cout << "X" << i << " Y" << i << ": ";
            cin >> a[i][0] >> a[i][1];
        }
        a[n][0] = a[0][0];  // Close the polygon by connecting the last vertex to the first
        a[n][1] = a[0][1];

        // Draw the polygon
        for (i = 0; i < n; i++) {
            line(a[i][0], a[i][1], a[i+1][0], a[i+1][1]);
        }
        getch();  // Wait for user input to continue
    }
} d;  // Object of the base class

// Derived class for filling the polygon using the scanline fill algorithm
class fillpoly : public drawpoly {
public:
    // Method to fill the polygon
    void fillpoly1() {
        // Calculate the inverse slope for each edge
        for (i = 0; i < n; i++) {
            dy = a[i+1][1] - a[i][1];  // dy = y2 - y1
            dx = a[i+1][0] - a[i][0];  // dx = x2 - x1
            if (dy == 0) {
                slope[i] = 1.0;  // Horizontal edge
            }
            if (dx == 0) {
                slope[i] = 0.0;  // Vertical edge
            }
            if (dy != 0 && dx != 0) {  // For other edges, calculate the inverse slope
                slope[i] = (float)dx / dy;
            }
        }

        // Loop through each scanline (y-coordinate) to fill the polygon
        for (y = 0; y < 480; y++) {  // Adjust for your screen height if needed
            k = 0;
            for (i = 0; i < n; i++) {
                // Check if the scanline intersects with the polygon edge
                if (((a[i][1] <= y) && (a[i+1][1] > y)) || ((a[i][1] > y) && (a[i+1][1] <= y))) {
                    xi[k] = (int)(a[i][0]) + slope[i] * (y - a[i][1]);  // Calculate the intersection point
                    k++;
                }
            }

            // Sort the intersection points in ascending order
            for (j = 0; j < k-1; j++) {
                for (i = 0; i < k-1; i++) {
                    if (xi[i] > xi[i+1]) {
                        temp = xi[i];
                        xi[i] = xi[i+1];
                        xi[i+1] = temp;
                    }
                }
            }

            // Draw horizontal lines between the sorted intersection points to fill the polygon
            setcolor(13);  // Choose a color for the fill (13 is magenta)
            for (i = 0; i < k; i += 2) {
                line(xi[i], y, xi[i+1], y);  // Draw the horizontal line
                delay(20);  // Small delay for visualization
            }
        }
    }
} f;  // Object of the derived class

int main() {
    int gd = DETECT, gm;
    initgraph(&gd, &gm, NULL);  // Initialize the graphics system

    f.drawpoly1();  // Draw the polygon
    f.fillpoly1();  // Fill the polygon using the scanline fill algorithm

    closegraph();  // Close the graphics mode
    return 0;
}
