Write C++program to draw the following pattern.Use DDA line and Bresenham's circledrawing algorithm.Apply the concept of encapsulation.

#include<iostream>
#include<graphics.h>
#include<math.h>
using namespace std;

// Encapsulating the line drawing algorithm in a class using DDA
class Line {
  int x, y, dx, dy, xi, yi, steps;
  
  public:
  void put(int x, int y) {
    putpixel(x, y, 9);  // Color for line pixels
  }
  
  void drawLine(int x1, int y1, int x2, int y2) {
    dx = x2 - x1;
    dy = y2 - y1;
    
    if (abs(dx) > abs(dy))
      steps = abs(dx);
    else
      steps = abs(dy);

    xi = dx / steps;
    yi = dy / steps;

    x = x1 + 0.5;
    y = y1 + 0.5;
    put(x, y);

    for (int i = 1; i <= steps; i++) {
      x += xi;
      y += yi;
      put(x, y);
      delay(5);
    }
  }
};

// Encapsulating the Bresenham's circle drawing algorithm in a class
class Circle {
  public:
  void drawCircle(int xc, int yc, int radius) {
    int x = 0, y = radius;
    int pk = 3 - 2 * radius;

    // Initial points
    putpixel(xc + x, yc + y, 6);
    putpixel(xc - x, yc + y, 6);
    putpixel(xc + x, yc - y, 6);
    putpixel(xc - x, yc - y, 6);
    putpixel(xc + y, yc + x, 6);
    putpixel(xc - y, yc + x, 6);
    putpixel(xc + y, yc - x, 6);
    putpixel(xc - y, yc - x, 6);

    while (x < y) {
      x++;
      if (pk < 0) {
        pk += 4 * x + 6;
      } else {
        y--;
        pk += 4 * (x - y) + 10;
      }

      // Drawing the circle using symmetry
      putpixel(xc + x, yc + y, 3);
      putpixel(xc - x, yc + y, 3);
      putpixel(xc + x, yc - y, 3);
      putpixel(xc - x, yc - y, 3);
      putpixel(xc + y, yc + x, 3);
      putpixel(xc - y, yc + x, 3);
      putpixel(xc + y, yc - x, 3);
      putpixel(xc - y, yc - x, 3);
      delay(10);
    }
  }
};

int main() {
  int gd = DETECT, gm;
  initgraph(&gd, &gm, NULL);

  Line line;
  Circle circle;

  // Draw square using DDA
  line.drawLine(100, 100, 400, 100);  // Top line
  line.drawLine(100, 400, 400, 400);  // Bottom line
  line.drawLine(100, 100, 100, 400);  // Left line
  line.drawLine(400, 100, 400, 400);  // Right line

  // Draw diagonals
  line.drawLine(100, 100, 400, 400);  // Diagonal 1
  line.drawLine(400, 100, 100, 400);  // Diagonal 2

  // Draw circle inside the square using Bresenham's algorithm
  circle.drawCircle(250, 250, 150);  // Centered at (250,250) with radius 150

  delay(5000);
  closegraph();
  return 0;
}
